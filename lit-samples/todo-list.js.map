{"version":3,"file":"todo-list.js","sourceRoot":"","sources":["src/todo-list.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,GAAG,EAAE,IAAI,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAQjE;;GAEG;AAEH,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,UAAU;IAAxC;;QAgBI,cAAS,GAAG;YACR,EAAC,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,IAAI,EAAC;YAC7C,EAAC,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,KAAK,EAAC;SAC9C,CAAC;QAOF,kBAAa,GAAG,KAAK,CAAC;IAyD1B,CAAC;IAvDY,MAAM;QACX,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa;YAC5B,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAChD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QAErB,MAAM,KAAK,GAAG,IAAI,CAAA;;kBAER,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACb,IAAI,CAAA;wCACY,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;yCAChC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;+BAC1C,IAAI,CAAC,IAAI,OAAO,CAC9B;;SAER,CAAC;QAEF,MAAM,eAAe,GAAG,IAAI,CAAA;;SAE3B,CAAC;QAEF,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;YACnC,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,eAAe,CAAC;QAEtB,OAAO,IAAI,CAAA;;cAEL,cAAc;;6BAEC,IAAI,CAAC,QAAQ;;;;iCAIT,IAAI,CAAC,iBAAiB;kCACrB,IAAI,CAAC,aAAa;;;SAG3C,CAAC;IACN,CAAC;IAEO,iBAAiB,CAAC,KAAY;QAClC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAA0B,CAAA;QACjD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC;IAC1C,CAAC;IAEO,eAAe,CAAC,IAAc;QAClC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;CAEJ,CAAA;AAlFmB,eAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;KAY1B,CAAA;AAGF;IADC,QAAQ,EAAE;2CAIT;AAIF;IADC,KAAK,CAAC,UAAU,CAAC;uCACO;AAGzB;IADC,QAAQ,EAAE;+CACW;AA1Bb,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CAmFpB;SAnFY,QAAQ","sourcesContent":["import {css, html, LitElement} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\n\n\ntype ToDoItem = {\n    text: string,\n    completed: boolean\n}\n\n/**\n * Sources form the Lit tutorial.\n */\n@customElement('todo-list')\nexport class ToDoList extends LitElement {\n    static override styles = css`\n        :host {\n          display: block;\n          border: solid 1px gray;\n          padding: 16px;\n          max-width: 800px;\n        }\n        \n        .completed {\n          text-decoration-line: line-through;\n          color: #777;\n        }\n    `;\n\n    @property()\n    listItems = [\n        {text: 'Start Lit tutorial', completed: true},\n        {text: 'Make to-do list', completed: false}\n    ];\n\n\n    @query(\"#newitem\")\n    input!: HTMLInputElement;\n\n    @property()\n    hideCompleted = false;\n\n    override render() {\n        const items = this.hideCompleted\n            ? this.listItems.filter(item => !item.completed)\n            : this.listItems;\n\n        const todos = html`\n            <ul>\n                ${items.map((item) =>\n                        html`\n                            <li class=${item.completed ? 'completed' : ''}\n                                @click=${() => this._toggleComplete(item)}\n                            >${item.text}</li>`\n                )}\n            </ul>\n        `;\n\n        const caughtUpMessage = html`\n            <p>You're all caught up!</p>\n        `;\n\n        const todosOrMessage = items.length > 0\n            ? todos\n            : caughtUpMessage;\n\n        return html`\n            <h2>To Do</h2>\n            ${todosOrMessage}\n            <input id=\"newitem\" aria-label=\"New item\">\n            <button @click=${this._addToDo}>Add</button>\n            <br>\n            <label>\n                <input type=\"checkbox\"\n                       @change=${this._setHideCompleted}\n                       ?checked=${this.hideCompleted}>\n                Hide completed\n            </label>\n        `;\n    }\n\n    private _setHideCompleted(event: Event) {\n        const checkbox = event.target as HTMLInputElement\n        this.hideCompleted = checkbox.checked;\n    }\n\n    private _toggleComplete(item: ToDoItem) {\n        item.completed = !item.completed;\n        this.requestUpdate();\n    }\n\n    private _addToDo() {\n        this.listItems.push({text: this.input.value, completed: false});\n        this.input.value = '';\n        this.requestUpdate();\n    }\n\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'todo-list': ToDoList;\n    }\n}\n"]}